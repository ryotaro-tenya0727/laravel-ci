version: 2.1
jobs:
  build:
    docker:
      #以降のコマンドは一つ目のイメージをベースに実行
      - image: circleci/php:7.3-node-browsers
      - image: circleci/postgres:11.6-alpine
        environment:
          #postgresの設定
          POSTGRES_DB: larasns
          POSTGRES_USER: default
          POSTGRES_PASSWORD: secret
    #laravel のdatabase.phpに適用
    environment:
      #laravel の環境変数を設定、build全体に適用
      #APP_ENV はテスト、本番のような環境設定
      APP_ENV: testing
      #laravel-ci/phpunit.xmlのDB_CONNECTIONをsqlite
      #からpgsql に設定
      DB_CONNECTION: pgsql
      DB_HOST: localhost
      #circleci/postgres:11.6-alpine はDockerfile
      #が EXPOSE 5432
      #localhost:5432 でpostgresにつながる
      #docker-compose.ymlの5432:5432はPCとコンテナを繋ぐ設定である
      #コンテナ同士であればDB_portと接続先のコンテナのポートが同じであれば良い
      #こうすれば、localhost:5432で接続できる。

      DB_PORT: 5432
      DB_DATABASE: larasns
      DB_USERNAME: default
      DB_PASSWORD: secret
    steps:
      - checkout
      - run: sudo composer self-update --1
      - restore_cache:
          #composer.lock のハッシュ値を　keyに含め、composer-v1 として保存(ハッシュ値とcomposer-v1を紐付け)。
          #保存するディレクトリはvendor。
          #composer.lock が変化すれば保存し直す。
          #ハッシュ値を見て同じだったら、このvendor 使えるよ〜みたいな感じ
          key: composer-v1-{{ checksum "composer.lock" }}
      - run: composer install -n --prefer-dist
      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor
      - restore_cache:
          key: npm-v1-{{ checksum "package-lock.json" }}
      - run:
          name: npm ci
          command: |
            if [ ! -d node_modules ]; then
              npm ci
            fi
      - save_cache:
          key: npm-v1-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run: npm run dev
      - run:
          name: get ready for postgres
          command: |
            sudo apt-get update
            sudo apt-get install libpq-dev
            sudo docker-php-ext-install pdo_pgsql
            dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: php test
          command: vendor/bin/phpunit
  deploy:
    docker:
      - image: circleci/php:7.3-node-browsers
    steps:
      - add_ssh_keys
      - run:
          name: deploy
          command: |
            ssh -o StrictHostKeyChecking=no -t webapp@${HOST_NAME} "cd laravel-ci && \
              git pull origin master && \
              composer install -n --no-dev --prefer-dist && \
              npm ci && \
              npm run prod && \
              php artisan migrate --force && \
              php artisan config:cache"
workflows:
  version: 2
  build_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
